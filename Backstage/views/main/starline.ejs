<!DOCTYPE html>  
<html>  
    <head>  
        <meta charset="UTF-8">  
        <title>基于canvas的在线模拟画板</title> 
        <link rel="stylesheet" href="css/style.css" media="screen" type="text/css" /> 
        <style type="text/css">  
            body{  
                margin: 0;  
            }  
            #canvas{  
                display: block;  
                background: #000;  
                margin: 0 auto;
                z-index: -1;  
            }
            .content {
            	position: relative;
            	text-size:18px;

            } 
            .main {
            	position: absolute;
            	top: 50%;
            	left:50%;
            	color: #fff;
            	text-size:18px;

            } 
            #text {
            	position: absolute;
            	z-index: -1000;

            }
           
        </style>  
    </head>  
    <body>
    	<div class="content">
    		<canvas id="canvas"></canvas>
	        <div class="main">
	        	<canvas id="text" width="500" height="100"></canvas>
				<canvas id="stage" width="500" height="100"></canvas>
				<form id="form">
				    <input type="hidden" id="inputText" value="绘凡绘图" />
				    <input type="submit" value="欢迎使用" />
				</form>
				<div style="text-align:center;clear:both">
				<script src="/gg_bd_ad_720x90.js" type="text/javascript"></script>
				<script src="/follow.js" type="text/javascript"></script>
				</div>


				  <script src='js/EasePack.min.js'></script><script src='js/TweenLite.min.js'></script><script src='js/easeljs-0.7.1.min.js'></script><script src='js/requestAnimationFrame.js'></script>

				  <script src="js/starline.js"></script>
	        </div>
    		
    	</div>  
        

        <script> 
        //star 对象 
            function Starry(){  
                this.cxt=canvas.getContext("2d");  
                canvas.width=window.innerWidth;  
                canvas.height=window.innerHeight;  
                this.cW=canvas.width;  
                this.cH=canvas.height;  
                this.num=200;  
                this.data=[];  
            }  


            //star原型对象
            Starry.prototype={ 
             	//	随机点方法
                init: function(){  
                    for (var i=0;i<this.num;i++) {  
                        this.data[i]={  
                            x:Math.random()*this.cW,  
                            y:Math.random()*this.cH,  
                            cX:Math.random()*0.6-0.3,  
                            cY:Math.random()*0.6-0.3  
                        };  
                        this.drawCircle(this.data[i].x,this.data[i].y);  
                    }  
                      
                }
                , 

                //生成随机点
                drawCircle: function(x,y){  
                    var cxt=canvas.getContext("2d");  
                    cxt.save();//保存路径  
                    cxt.fillStyle="pink";  
                    cxt.beginPath();//开始路径  
                    cxt.arc(x,y,1,0,Math.PI*2,false);  
                    cxt.closePath();//结束路径  
                    cxt.fill();//填充方法  
                    cxt.restore();//释放路径  
                },

                //随机点连线
                drawLine: function(x1,y1,x2,y2){  
                    var cxt=this.cxt;  
                    var color=cxt.createLinearGradient(x1,y1,x2,y2);  
                    color.addColorStop(0,"#969696");  
                    color.addColorStop(1,"#894722");  
                    cxt.save();  
                    cxt.strokeStyle=color;  
                    cxt.beginPath();//开始路径  
                    cxt.moveTo(x1,y1);  
                    cxt.lineTo(x2,y2);  
                    cxt.closePath();//结束路径  
                    cxt.stroke();//填充方法  
                    cxt.restore();//释放路径  
                      
                }, 

                //核心方法
                moveCircle: function(){  
                    var self=this;  
                    self.cxt.clearRect(0,0,self.cW,self.cH);  
                    for(var i=0;i<self.num;i++){  
                        self.data[i].x+=self.data[i].cX;  
                        self.data[i].y+=self.data[i].cY;  
                        if(self.data[i].x>self.cW||self.data[i].x<0){  
                            self.data[i].cX=-self.data[i].cX;  
                        }  
                        if(self.data[i].x>self.cH||self.data[i].y<0){  
                            self.data[i].cY=-self.data[i].cY;  
                        }  
                        this.drawCircle(self.data[i].x,self.data[i].y);  
                        for(var j=i+1;j<self.num;j++){  
                            if(Math.pow(self.data[i].x-self.data[j].x,2)  
                            +Math.pow(self.data[i].y-self.data[j].y,2)  
                            <=50*50){  
                                self.drawLine(self.data[i].x,self.data[i].y,  
                                    self.data[j].x,self.data[j].y);  
                            }  
                        }  
                    }  
                }  
            }
            //初始化实例  
            var starry=new Starry();  
            starry.init();
            //实现动态效果  
            setInterval(function(){starry.moveCircle();},1);  
        </script>  
    </body>  
</html>  